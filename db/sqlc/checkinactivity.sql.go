// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: checkinactivity.sql

package db

import (
	"context"
	"time"
)

const createCheckinActivity = `-- name: CreateCheckinActivity :one
insert INTO checkinactivity
(checkin,checkout,userid ,employeeid ,locationid)
VALUES
    ($1,$2,$3,$4,$5) RETURNING id, checkin, checkout, userid, employeeid, locationid
`

type CreateCheckinActivityParams struct {
	Checkin    time.Time `json:"checkin"`
	Checkout   time.Time `json:"checkout"`
	Userid     int64     `json:"userid"`
	Employeeid int64     `json:"employeeid"`
	Locationid int64     `json:"locationid"`
}

func (q *Queries) CreateCheckinActivity(ctx context.Context, arg CreateCheckinActivityParams) (Checkinactivity, error) {
	row := q.db.QueryRowContext(ctx, createCheckinActivity,
		arg.Checkin,
		arg.Checkout,
		arg.Userid,
		arg.Employeeid,
		arg.Locationid,
	)
	var i Checkinactivity
	err := row.Scan(
		&i.ID,
		&i.Checkin,
		&i.Checkout,
		&i.Userid,
		&i.Employeeid,
		&i.Locationid,
	)
	return i, err
}

const getCheckinActivity = `-- name: GetCheckinActivity :many
SELECT id, checkin, checkout, userid, employeeid, locationid FROM checkinactivity
WHERE userid = $1
`

func (q *Queries) GetCheckinActivity(ctx context.Context, userid int64) ([]Checkinactivity, error) {
	rows, err := q.db.QueryContext(ctx, getCheckinActivity, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Checkinactivity{}
	for rows.Next() {
		var i Checkinactivity
		if err := rows.Scan(
			&i.ID,
			&i.Checkin,
			&i.Checkout,
			&i.Userid,
			&i.Employeeid,
			&i.Locationid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
