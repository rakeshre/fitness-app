// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: enrolmentanalytics.sql

package db

import (
	"context"
)

const getAllClassesOfferedAndAttendees = `-- name: GetAllClassesOfferedAndAttendees :many
SELECT
    s."day",
    COUNT(c.id) AS classes_offered,
    COUNT(cc.id) AS attendees
FROM
    class c
        JOIN schedule s ON c.scheduleid = s.id
        LEFT JOIN classcatalogue cc ON c.id = cc.courseid
GROUP BY
    s."day"
ORDER BY
    s."day"
`

type GetAllClassesOfferedAndAttendeesRow struct {
	Day            string `json:"day"`
	ClassesOffered int64  `json:"classes_offered"`
	Attendees      int64  `json:"attendees"`
}

func (q *Queries) GetAllClassesOfferedAndAttendees(ctx context.Context) ([]GetAllClassesOfferedAndAttendeesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllClassesOfferedAndAttendees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllClassesOfferedAndAttendeesRow{}
	for rows.Next() {
		var i GetAllClassesOfferedAndAttendeesRow
		if err := rows.Scan(&i.Day, &i.ClassesOffered, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllClassesOfferedAndAttendeesPerWeek = `-- name: GetAllClassesOfferedAndAttendeesPerWeek :many
SELECT
    DATE_TRUNC('week', s.startdate),
    COUNT(c.id) AS classes_offered,
    COUNT(cc.id) AS attendees
FROM
    class c
        JOIN schedule s ON c.scheduleid = s.id
        LEFT JOIN classcatalogue cc ON c.id = cc.courseid
GROUP BY
    DATE_TRUNC('week', s.startdate)
ORDER BY
    DATE_TRUNC('week', s.startdate)
`

type GetAllClassesOfferedAndAttendeesPerWeekRow struct {
	DateTrunc      int64 `json:"date_trunc"`
	ClassesOffered int64 `json:"classes_offered"`
	Attendees      int64 `json:"attendees"`
}

func (q *Queries) GetAllClassesOfferedAndAttendeesPerWeek(ctx context.Context) ([]GetAllClassesOfferedAndAttendeesPerWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllClassesOfferedAndAttendeesPerWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllClassesOfferedAndAttendeesPerWeekRow{}
	for rows.Next() {
		var i GetAllClassesOfferedAndAttendeesPerWeekRow
		if err := rows.Scan(&i.DateTrunc, &i.ClassesOffered, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTopAttendedClass = `-- name: GetAllTopAttendedClass :many
SELECT
    c.id AS class_id,
    c.name AS class_name,
    COUNT(cc.id) AS attendees
FROM
    class c
        JOIN classcatalogue cc ON c.id = cc.courseid
GROUP BY
    c.id
ORDER BY
    attendees DESC
`

type GetAllTopAttendedClassRow struct {
	ClassID   int64          `json:"class_id"`
	ClassName string `json:"class_name"`
	Attendees int64          `json:"attendees"`
}

func (q *Queries) GetAllTopAttendedClass(ctx context.Context) ([]GetAllTopAttendedClassRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTopAttendedClass)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTopAttendedClassRow{}
	for rows.Next() {
		var i GetAllTopAttendedClassRow
		if err := rows.Scan(&i.ClassID, &i.ClassName, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassesOfferedAndAttendees = `-- name: GetClassesOfferedAndAttendees :many
SELECT
    s."day",
    COUNT(c.id) AS classes_offered,
    COUNT(cc.id) AS attendees
FROM
    class c
        JOIN schedule s ON c.scheduleid = s.id
        LEFT JOIN classcatalogue cc ON c.id = cc.courseid
where s.locationid =$1
GROUP BY
    s."day"
ORDER BY
    s."day"
`

type GetClassesOfferedAndAttendeesRow struct {
	Day            string `json:"day"`
	ClassesOffered int64  `json:"classes_offered"`
	Attendees      int64  `json:"attendees"`
}

func (q *Queries) GetClassesOfferedAndAttendees(ctx context.Context, locationid int64) ([]GetClassesOfferedAndAttendeesRow, error) {
	rows, err := q.db.QueryContext(ctx, getClassesOfferedAndAttendees, locationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetClassesOfferedAndAttendeesRow{}
	for rows.Next() {
		var i GetClassesOfferedAndAttendeesRow
		if err := rows.Scan(&i.Day, &i.ClassesOffered, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassesOfferedAndAttendeesPerWeek = `-- name: GetClassesOfferedAndAttendeesPerWeek :many
SELECT
    DATE_TRUNC('week', s.startdate) ,
    COUNT(c.id) AS classes_offered,
    COUNT(cc.id) AS attendees
FROM
    class c
        JOIN schedule s ON c.scheduleid = s.id
        LEFT JOIN classcatalogue cc ON c.id = cc.courseid
where s.locationid =$1
GROUP BY
    DATE_TRUNC('week', s.startdate)
ORDER BY
    DATE_TRUNC('week', s.startdate)
`

type GetClassesOfferedAndAttendeesPerWeekRow struct {
	DateTrunc      int64 `json:"date_trunc"`
	ClassesOffered int64 `json:"classes_offered"`
	Attendees      int64 `json:"attendees"`
}

func (q *Queries) GetClassesOfferedAndAttendeesPerWeek(ctx context.Context, locationid int64) ([]GetClassesOfferedAndAttendeesPerWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getClassesOfferedAndAttendeesPerWeek, locationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetClassesOfferedAndAttendeesPerWeekRow{}
	for rows.Next() {
		var i GetClassesOfferedAndAttendeesPerWeekRow
		if err := rows.Scan(&i.DateTrunc, &i.ClassesOffered, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMostPopularHourForClassesOnWeekdays = `-- name: GetMostPopularHourForClassesOnWeekdays :many
SELECT
    EXTRACT(HOUR FROM s.starttime),
    COUNT(cc.id) AS attendees
FROM
    class c
    JOIN schedule s ON c.scheduleid = s.id
    JOIN classcatalogue cc ON c.id = cc.courseid
WHERE
    EXTRACT(DOW FROM s.startdate) BETWEEN 1 AND 5
GROUP BY
    EXTRACT(HOUR FROM s.starttime)
ORDER BY
    attendees DESC
`

type GetMostPopularHourForClassesOnWeekdaysRow struct {
	DatePart  float64 `json:"date_part"`
	Attendees int64   `json:"attendees"`
}

func (q *Queries) GetMostPopularHourForClassesOnWeekdays(ctx context.Context) ([]GetMostPopularHourForClassesOnWeekdaysRow, error) {
	rows, err := q.db.QueryContext(ctx, getMostPopularHourForClassesOnWeekdays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMostPopularHourForClassesOnWeekdaysRow{}
	for rows.Next() {
		var i GetMostPopularHourForClassesOnWeekdaysRow
		if err := rows.Scan(&i.DatePart, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMostPopularHourForClassesOnWeekends = `-- name: GetMostPopularHourForClassesOnWeekends :many
SELECT
    EXTRACT(HOUR FROM s.starttime) ,
    COUNT(cc.id) AS attendees
FROM
    class c
    JOIN schedule s ON c.scheduleid = s.id
    JOIN classcatalogue cc ON c.id = cc.courseid
WHERE
    EXTRACT(DOW FROM s.startdate) IN (0, 6)
GROUP BY
    EXTRACT(HOUR FROM s.starttime)
ORDER BY
    attendees DESC
`

type GetMostPopularHourForClassesOnWeekendsRow struct {
	DatePart  float64 `json:"date_part"`
	Attendees int64   `json:"attendees"`
}

func (q *Queries) GetMostPopularHourForClassesOnWeekends(ctx context.Context) ([]GetMostPopularHourForClassesOnWeekendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMostPopularHourForClassesOnWeekends)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMostPopularHourForClassesOnWeekendsRow{}
	for rows.Next() {
		var i GetMostPopularHourForClassesOnWeekendsRow
		if err := rows.Scan(&i.DatePart, &i.Attendees); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
