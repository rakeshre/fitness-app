// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: membership.sql

package db

import (
	"context"
	"time"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO membership (
    userid ,membershipid,expirydate
) VALUES (
             $1, $2, $3
         ) RETURNING membershipid, userid, startdate, expirydate
`

type CreateMembershipParams struct {
	Userid       int64     `json:"userid"`
	Membershipid int64     `json:"membershipid"`
	Expirydate   time.Time `json:"expirydate"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership, arg.Userid, arg.Membershipid, arg.Expirydate)
	var i Membership
	err := row.Scan(
		&i.Membershipid,
		&i.Userid,
		&i.Startdate,
		&i.Expirydate,
	)
	return i, err
}

const getMembership = `-- name: GetMembership :one
SELECT membershipid, userid, startdate, expirydate FROM membership
WHERE userid = $1 LIMIT 1
`

func (q *Queries) GetMembership(ctx context.Context, userid int64) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembership, userid)
	var i Membership
	err := row.Scan(
		&i.Membershipid,
		&i.Userid,
		&i.Startdate,
		&i.Expirydate,
	)
	return i, err
}
