// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: schedule.sql

package db

import (
	"context"
	"time"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedule (
starttime,
endtime,
startdate,
enddate,
locationid,
day
)
VALUES
($1, $2, $3,$4, $5, $6) RETURNING id, locationid, startdate, enddate, starttime, endtime, day
`

type CreateScheduleParams struct {
	Starttime  time.Time `json:"starttime"`
	Endtime    time.Time `json:"endtime"`
	Startdate  time.Time `json:"startdate"`
	Enddate    time.Time `json:"enddate"`
	Locationid int64     `json:"locationid"`
	Day        string    `json:"day"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.Starttime,
		arg.Endtime,
		arg.Startdate,
		arg.Enddate,
		arg.Locationid,
		arg.Day,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Locationid,
		&i.Startdate,
		&i.Enddate,
		&i.Starttime,
		&i.Endtime,
		&i.Day,
	)
	return i, err
}

const getAllSchedules = `-- name: GetAllSchedules :many
SELECT id, locationid, startdate, enddate, starttime, endtime, day FROM schedule
`

func (q *Queries) GetAllSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.Locationid,
			&i.Startdate,
			&i.Enddate,
			&i.Starttime,
			&i.Endtime,
			&i.Day,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, locationid, startdate, enddate, starttime, endtime, day FROM schedule
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSchedule(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Locationid,
		&i.Startdate,
		&i.Enddate,
		&i.Starttime,
		&i.Endtime,
		&i.Day,
	)
	return i, err
}
