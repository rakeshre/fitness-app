// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: clubusageanalytics.sql

package db

import (
	"context"
)

const getAverageVisitorsPerHourWeekdays = `-- name: GetAverageVisitorsPerHourWeekdays :many
SELECT
    EXTRACT(HOUR FROM ci.checkin) AS hour,
    COUNT(*)/COUNT(DISTINCT DATE_TRUNC('day', ci.checkin))::float AS avg_visitors
FROM
    checkinactivity ci
WHERE
    EXTRACT(DOW FROM ci.checkin) BETWEEN 1 AND 5
GROUP BY
    hour
ORDER BY
    hour
`

type GetAverageVisitorsPerHourWeekdaysRow struct {
	Hour        float64 `json:"hour"`
	AvgVisitors int32   `json:"avg_visitors"`
}

func (q *Queries) GetAverageVisitorsPerHourWeekdays(ctx context.Context) ([]GetAverageVisitorsPerHourWeekdaysRow, error) {
	rows, err := q.db.QueryContext(ctx, getAverageVisitorsPerHourWeekdays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAverageVisitorsPerHourWeekdaysRow{}
	for rows.Next() {
		var i GetAverageVisitorsPerHourWeekdaysRow
		if err := rows.Scan(&i.Hour, &i.AvgVisitors); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAverageVisitorsPerHourWeekends = `-- name: GetAverageVisitorsPerHourWeekends :many
SELECT
    EXTRACT(HOUR FROM ci.checkin) AS hour,
    COUNT(*)/COUNT(DISTINCT DATE_TRUNC('day', ci.checkin))::float AS avg_visitors
FROM
    checkinactivity ci
WHERE
    EXTRACT(DOW FROM ci.checkin) IN (0, 6)
GROUP BY
    hour
ORDER BY
    hour
`

type GetAverageVisitorsPerHourWeekendsRow struct {
	Hour        float64 `json:"hour"`
	AvgVisitors int32   `json:"avg_visitors"`
}

func (q *Queries) GetAverageVisitorsPerHourWeekends(ctx context.Context) ([]GetAverageVisitorsPerHourWeekendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAverageVisitorsPerHourWeekends)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAverageVisitorsPerHourWeekendsRow{}
	for rows.Next() {
		var i GetAverageVisitorsPerHourWeekendsRow
		if err := rows.Scan(&i.Hour, &i.AvgVisitors); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBusiestTimeByHourAndDayOfWeek = `-- name: GetBusiestTimeByHourAndDayOfWeek :many
SELECT
    EXTRACT(DOW FROM ci.checkin) AS day_of_week,
    EXTRACT(HOUR FROM ci.checkin) AS hour,
    COUNT(*) AS visits
FROM
    checkinactivity ci
GROUP BY
    day_of_week, hour
ORDER BY
    day_of_week, hour
`

type GetBusiestTimeByHourAndDayOfWeekRow struct {
	DayOfWeek float64 `json:"day_of_week"`
	Hour      float64 `json:"hour"`
	Visits    int64   `json:"visits"`
}

func (q *Queries) GetBusiestTimeByHourAndDayOfWeek(ctx context.Context) ([]GetBusiestTimeByHourAndDayOfWeekRow, error) {
	rows, err := q.db.QueryContext(ctx, getBusiestTimeByHourAndDayOfWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBusiestTimeByHourAndDayOfWeekRow{}
	for rows.Next() {
		var i GetBusiestTimeByHourAndDayOfWeekRow
		if err := rows.Scan(&i.DayOfWeek, &i.Hour, &i.Visits); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHoursSpentInGymByDay = `-- name: GetHoursSpentInGymByDay :many
SELECT DATE_TRUNC('day', ci.checkin) AS day,
SUM(EXTRACT(EPOCH FROM (ci.checkout - ci.checkin))/3600) AS hours_spent
FROM checkinactivity ci
GROUP BY day
ORDER BY day
`

type GetHoursSpentInGymByDayRow struct {
	Day        int64 `json:"day"`
	HoursSpent int64 `json:"hours_spent"`
}

func (q *Queries) GetHoursSpentInGymByDay(ctx context.Context) ([]GetHoursSpentInGymByDayRow, error) {
	rows, err := q.db.QueryContext(ctx, getHoursSpentInGymByDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHoursSpentInGymByDayRow{}
	for rows.Next() {
		var i GetHoursSpentInGymByDayRow
		if err := rows.Scan(&i.Day, &i.HoursSpent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
