// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: overallanalytics.sql

package db

import (
	"context"
)

const getCurrentDayCheckinCount = `-- name: GetCurrentDayCheckinCount :one
SELECT
    COUNT(*) AS checkin_count
FROM
    checkinactivity c
WHERE
        c.checkin  >= DATE_TRUNC('day', NOW())
`

func (q *Queries) GetCurrentDayCheckinCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentDayCheckinCount)
	var checkin_count int64
	err := row.Scan(&checkin_count)
	return checkin_count, err
}

const getCurrentDayClassEnrolmentCount = `-- name: GetCurrentDayClassEnrolmentCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    classcatalogue cc
        JOIN class c ON cc.courseid = c.id
WHERE
        cc.enrolmentdate >= DATE_TRUNC('day', NOW())
  AND cc.enrolmentdate < DATE_TRUNC('day', NOW()) + INTERVAL '1 day'
`

func (q *Queries) GetCurrentDayClassEnrolmentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentDayClassEnrolmentCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getCurrentDayMembershipsCount = `-- name: GetCurrentDayMembershipsCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    membership m
WHERE
        m.startdate  >= DATE_TRUNC('day', NOW())
  AND m.startdate  < DATE_TRUNC('day', NOW()) + INTERVAL '1 day'
`

func (q *Queries) GetCurrentDayMembershipsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentDayMembershipsCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getCurrentMonthCheckinCount = `-- name: GetCurrentMonthCheckinCount :one
SELECT
    COUNT(*) AS checkin_count
FROM
    checkinactivity c
WHERE
        c.checkin  >= DATE_TRUNC('month', NOW())
`

func (q *Queries) GetCurrentMonthCheckinCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentMonthCheckinCount)
	var checkin_count int64
	err := row.Scan(&checkin_count)
	return checkin_count, err
}

const getCurrentMonthClassEnrolmentCount = `-- name: GetCurrentMonthClassEnrolmentCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    classcatalogue cc
        JOIN class c ON cc.courseid = c.id
WHERE
        cc.enrolmentdate >= DATE_TRUNC('month', NOW())
  AND cc.enrolmentdate < DATE_TRUNC('month', NOW()) + INTERVAL '1 month'
`

func (q *Queries) GetCurrentMonthClassEnrolmentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentMonthClassEnrolmentCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getCurrentMonthMembershipsCount = `-- name: GetCurrentMonthMembershipsCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    membership m
WHERE
        m.startdate  >= DATE_TRUNC('month', NOW())
  AND m.startdate  < DATE_TRUNC('month', NOW()) + INTERVAL '1 month'
`

func (q *Queries) GetCurrentMonthMembershipsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentMonthMembershipsCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getCurrentWeekCheckinCount = `-- name: GetCurrentWeekCheckinCount :one
SELECT
    COUNT(*) AS checkin_count
FROM
    checkinactivity c
WHERE
        c.checkin  >= DATE_TRUNC('week', NOW())
`

func (q *Queries) GetCurrentWeekCheckinCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentWeekCheckinCount)
	var checkin_count int64
	err := row.Scan(&checkin_count)
	return checkin_count, err
}

const getCurrentWeekClassEnrolmentCount = `-- name: GetCurrentWeekClassEnrolmentCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    classcatalogue cc
        JOIN class c ON cc.courseid = c.id
WHERE
        cc.enrolmentdate >= DATE_TRUNC('week', NOW())
  AND cc.enrolmentdate < DATE_TRUNC('week', NOW()) + INTERVAL '1 week'
`

func (q *Queries) GetCurrentWeekClassEnrolmentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentWeekClassEnrolmentCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getCurrentWeekMembershipsCount = `-- name: GetCurrentWeekMembershipsCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    membership m
WHERE
        m.startdate  >= DATE_TRUNC('week', NOW())
  AND m.startdate  < DATE_TRUNC('week', NOW()) + INTERVAL '1 week'
`

func (q *Queries) GetCurrentWeekMembershipsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentWeekMembershipsCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getPreviousDayCheckinCount = `-- name: GetPreviousDayCheckinCount :one
SELECT
    COUNT(*) AS checkin_count
FROM
    checkinactivity c
WHERE
        c.checkin  >= DATE_TRUNC('day', NOW()) - INTERVAL '1 day'
  AND c.checkin  < DATE_TRUNC('day', NOW())
`

func (q *Queries) GetPreviousDayCheckinCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousDayCheckinCount)
	var checkin_count int64
	err := row.Scan(&checkin_count)
	return checkin_count, err
}

const getPreviousDayClassEnrolmentCount = `-- name: GetPreviousDayClassEnrolmentCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    classcatalogue cc
        JOIN class c ON cc.courseid = c.id
WHERE
        cc.enrolmentdate >= DATE_TRUNC('day', NOW()) - INTERVAL '1 day'
  AND cc.enrolmentdate < DATE_TRUNC('day', NOW())
`

func (q *Queries) GetPreviousDayClassEnrolmentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousDayClassEnrolmentCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getPreviousDayMembershipsCount = `-- name: GetPreviousDayMembershipsCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    membership m
WHERE
        m.startdate  >= DATE_TRUNC('day', NOW()) - INTERVAL '1 day'
  AND m.startdate  < DATE_TRUNC('day', NOW())
`

func (q *Queries) GetPreviousDayMembershipsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousDayMembershipsCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getPreviousMonthCheckinCount = `-- name: GetPreviousMonthCheckinCount :one
SELECT
    COUNT(*) AS checkin_count
FROM
    checkinactivity c
WHERE
        c.checkin  >= DATE_TRUNC('month', NOW()) - INTERVAL '1 month'
  AND c.checkin  < DATE_TRUNC('month', NOW())
`

func (q *Queries) GetPreviousMonthCheckinCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousMonthCheckinCount)
	var checkin_count int64
	err := row.Scan(&checkin_count)
	return checkin_count, err
}

const getPreviousMonthClassEnrolmentCount = `-- name: GetPreviousMonthClassEnrolmentCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    classcatalogue cc
        JOIN class c ON cc.courseid = c.id
WHERE
        cc.enrolmentdate >= DATE_TRUNC('month', NOW()) - INTERVAL '1 month'
  AND cc.enrolmentdate < DATE_TRUNC('month', NOW())
`

func (q *Queries) GetPreviousMonthClassEnrolmentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousMonthClassEnrolmentCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getPreviousMonthMembershipsCount = `-- name: GetPreviousMonthMembershipsCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    membership m
WHERE
        m.startdate  >= DATE_TRUNC('month', NOW()) - INTERVAL '1 month'
  AND m.startdate  < DATE_TRUNC('month', NOW())
`

func (q *Queries) GetPreviousMonthMembershipsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousMonthMembershipsCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getPreviousWeekCheckinCount = `-- name: GetPreviousWeekCheckinCount :one
SELECT
    COUNT(*) AS checkin_count
FROM
    checkinactivity c
WHERE
        c.checkin  >= DATE_TRUNC('week', NOW()) - INTERVAL '1 week'
  AND c.checkin  < DATE_TRUNC('week', NOW())
`

func (q *Queries) GetPreviousWeekCheckinCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousWeekCheckinCount)
	var checkin_count int64
	err := row.Scan(&checkin_count)
	return checkin_count, err
}

const getPreviousWeekClassEnrolmentCount = `-- name: GetPreviousWeekClassEnrolmentCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    classcatalogue cc
        JOIN class c ON cc.courseid = c.id
WHERE
        cc.enrolmentdate >= DATE_TRUNC('week', NOW()) - INTERVAL '1 week'
  AND cc.enrolmentdate < DATE_TRUNC('week', NOW())
`

func (q *Queries) GetPreviousWeekClassEnrolmentCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousWeekClassEnrolmentCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}

const getPreviousWeekMembershipsCount = `-- name: GetPreviousWeekMembershipsCount :one
SELECT
    COUNT(*) AS new_member_count
FROM
    membership m
WHERE
        m.startdate  >= DATE_TRUNC('week', NOW()) - INTERVAL '1 week'
  AND m.startdate  < DATE_TRUNC('week', NOW())
`

func (q *Queries) GetPreviousWeekMembershipsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPreviousWeekMembershipsCount)
	var new_member_count int64
	err := row.Scan(&new_member_count)
	return new_member_count, err
}
