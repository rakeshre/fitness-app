// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: revenueanalytics.sql

package db

import (
	"context"
)

const getClassRevenueGenerateByLocation = `-- name: GetClassRevenueGenerateByLocation :many
SELECT
    l.id AS location_id,
    SUM(c.cost) AS revenue
FROM
    class c
        JOIN schedule s ON c.scheduleid = s.id
        JOIN location l ON s.locationid = l.id
        JOIN classcatalogue cc ON c.id = cc.courseid
GROUP BY
    l.id
`

type GetClassRevenueGenerateByLocationRow struct {
	LocationID int64 `json:"location_id"`
	Revenue    int64 `json:"revenue"`
}

func (q *Queries) GetClassRevenueGenerateByLocation(ctx context.Context) ([]GetClassRevenueGenerateByLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, getClassRevenueGenerateByLocation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetClassRevenueGenerateByLocationRow{}
	for rows.Next() {
		var i GetClassRevenueGenerateByLocationRow
		if err := rows.Scan(&i.LocationID, &i.Revenue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRevenueGenerateByMemberships = `-- name: GetRevenueGenerateByMemberships :many
SELECT
    SUM(mt.cost) AS total_revenue
FROM
    membership m
        JOIN membershiptypes mt ON m.membershipid = mt.id
`

func (q *Queries) GetRevenueGenerateByMemberships(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getRevenueGenerateByMemberships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var total_revenue int64
		if err := rows.Scan(&total_revenue); err != nil {
			return nil, err
		}
		items = append(items, total_revenue)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
