// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: employee.sql

package db

import (
	"context"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee (
    name,
    email,
    hashedpassword,
    locationid
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, name, email, hashedpassword, locationid, created_at
`

type CreateEmployeeParams struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Hashedpassword string `json:"hashedpassword"`
	Locationid     int64  `json:"locationid"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.Name,
		arg.Email,
		arg.Hashedpassword,
		arg.Locationid,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Locationid,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, name, email, hashedpassword, locationid, created_at FROM employee
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, name string) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, name)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Locationid,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployeeFromEmail = `-- name: GetEmployeeFromEmail :one
SELECT id, name, email, hashedpassword, locationid, created_at FROM employee
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetEmployeeFromEmail(ctx context.Context, email string) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeFromEmail, email)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Locationid,
		&i.CreatedAt,
	)
	return i, err
}
